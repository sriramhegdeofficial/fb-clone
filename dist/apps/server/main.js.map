{"version":3,"file":"main.js","mappings":"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","sources":["webpack://fbnx/./apps/server/src/routes/auth.ts","webpack://fbnx/./apps/server/src/utils/jwt.ts","webpack://fbnx/external commonjs \"@hapi/boom\"","webpack://fbnx/external commonjs \"@hapi/hapi\"","webpack://fbnx/external commonjs \"@prisma/client\"","webpack://fbnx/external commonjs \"apollo-server-hapi\"","webpack://fbnx/external commonjs \"bcryptjs\"","webpack://fbnx/external commonjs \"http-errors\"","webpack://fbnx/external commonjs \"jsonwebtoken\"","webpack://fbnx/external commonjs \"tslib\"","webpack://fbnx/webpack/bootstrap","webpack://fbnx/./apps/server/src/main.ts"],"sourcesContent":["import { ResponseToolkit, Request } from 'hapi';\r\nimport * as Boom from '@hapi/boom';\r\nimport bcrypt = require('bcryptjs');\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { jwtfuncs } from './../utils/jwt';\r\n\r\n\r\nconst prisma = new PrismaClient();\r\n\r\ninterface UserInput {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const register = {\r\n  method: 'POST',\r\n  path: '/api/register',\r\n  options: {\r\n    cors: {\r\n      origin: ['*'],\r\n      credentials: true,\r\n      additionalHeaders: ['cache-control', 'x-requested-with', 'X_AUTH_TOKEN'],\r\n    },\r\n\r\n    handler: async (request: Request, h: ResponseToolkit) => {\r\n      const usercred = request.payload as UserInput;\r\n      const userAlreadyExists = await prisma.user.findUnique({\r\n        where: {\r\n          email: usercred.email,\r\n        },\r\n      });\r\n\r\n      if (userAlreadyExists) {\r\n        return Boom.badRequest('Email is taken.');\r\n      }\r\n\r\n      const password = bcrypt.hashSync(usercred.password, 8);\r\n      const user = await prisma.user.create({\r\n        data: {\r\n          email: usercred.email,\r\n          password: password,\r\n        },\r\n      });\r\n      const accessToken = await jwtfuncs.signAccessToken(user);\r\n\r\n      return h\r\n        .response({\r\n          accessToken,\r\n        })\r\n        .code(200);\r\n    },\r\n  },\r\n};\r\n\r\nexport const login = {\r\n  method: 'POST',\r\n  path: '/api/login',\r\n\r\n  options: {\r\n    cors: {\r\n      origin: ['*'],\r\n      credentials: true,\r\n      additionalHeaders: ['cache-control', 'x-requested-with', 'X_AUTH_TOKEN'],\r\n    },\r\n\r\n    handler: async (request: Request, h: ResponseToolkit) => {\r\n      const { email, password } = request.payload as UserInput;\r\n      const user = await prisma.user.findUnique({\r\n        where: {\r\n          email,\r\n        },\r\n      });\r\n      if (!user) {\r\n        return Boom.notFound('User not registered');\r\n      }\r\n      const checkPassword = bcrypt.compareSync(password, user.password);\r\n      if (!checkPassword) {\r\n        Boom.unauthorized('Email or passsword is invalid');\r\n      }\r\n      delete user.password;\r\n      delete user.id;\r\n      const accessToken = await jwtfuncs.signAccessToken(user);\r\n\r\n          return h.response({  accessToken }).code(200)\r\n      \r\n      \r\n    },\r\n  },\r\n};\r\n","import jwt = require('jsonwebtoken')\r\nimport createError = require('http-errors')\r\nimport * as dotenv from 'dotenv'\r\n//require('dotenv').config()\r\n\r\nconst accessTokenSecret = process.env.ACCESS_TOKEN_SECRET\r\nexport const jwtfuncs = {\r\n    signAccessToken(payload) : Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            jwt.sign({ payload }, accessTokenSecret, {\r\n            }, (err, token) => {\r\n                if (err) {\r\n                reject(createError.InternalServerError())\r\n                }\r\n                resolve(token)\r\n            })\r\n        })\r\n    },\r\n    verifyAccessToken(token) : Promise<object> {\r\n        return new Promise((resolve, reject) => {\r\n            jwt.verify(token, accessTokenSecret, (err, payload) => {\r\n                if (err) {\r\n                    const message = err.name == 'JsonWebTokenError' ? 'Unauthorized' : err.message\r\n                    return reject(createError.Unauthorized(message))\r\n                }\r\n                resolve(payload)\r\n            })\r\n        })\r\n    }\r\n}","module.exports = require(\"@hapi/boom\");","module.exports = require(\"@hapi/hapi\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"apollo-server-hapi\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"http-errors\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\r\nimport { ApolloServer,ApolloServerPluginStopHapiServer,gql} from 'apollo-server-hapi';\r\nimport * as Hapi from '@hapi/hapi';\r\nimport { register, login} from './routes/auth'\r\nimport { ResponseToolkit, Request } from 'hapi';\r\n\r\n\r\n\r\n\r\nconst typeDefs = gql`\r\n\r\ntype Query {\r\n    sayHi: String!\r\n}\r\n\r\n`\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        sayHi: () => 'hello hi'\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  async function startApolloServer(typeDefs, resolvers) {\r\n    const app = Hapi.server({ \r\n      port: process.env.PORT || 4000,\r\n      \r\n  \r\n       });\r\n\r\n\r\n    app.route({\r\n      method: 'GET',\r\n      path: '/',\r\n      handler: (request: Request, h: ResponseToolkit) => {\r\n        return h.response(\"hello\")\r\n      }\r\n    })\r\n    app.route(register);\r\n    app.route(login)\r\n\r\n    \r\n\r\n\r\n    const server = new ApolloServer({\r\n      typeDefs,\r\n      resolvers,\r\n      plugins: [ApolloServerPluginStopHapiServer({ hapiServer: app })],\r\n    });\r\n  \r\n    await server.start();\r\n    await server.applyMiddleware({ app });\r\n    await app.start();\r\n  }\r\n\r\n startApolloServer(typeDefs, resolvers)\r\n.then(() => console.log(`successfully running on port ${process.env.PORT || 4000}`))"],"names":[],"sourceRoot":""}